var candle;
var heightRatio;
var seed;
var bg;

function setup() {
  createCanvas(windowWidth, windowHeight);
  seed = floor(random(Number.MAX_SAFE_INTEGER));
  reset();
}

function draw() {
  bg.display();
  candle.update();
  candle.display();
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
  reset();
}

function reset() {
  heightRatio = height/595;
  noiseSeed(seed);
  candle = new Candle(width/2, height/2);
  bg = new Background();
}

class Background{
  constructor() {
    this.bg = createGraphics(width, height);
    this.bg.translate(width/2, height/2);
    this.defineConstants();
    this.construct();
  }
  
  display() {
    image(this.bg, 0, 0);
  }

  construct() {
    this.bg.noStroke();
    this.bg.background(this.COLOR.BLACK);
    for (let i = this.DIAM.MAX; i > this.DIAM.MIN; i -= this.DIAM.DELTA) {
      this.bg.fill(map(i, this.DIAM.MIN, this.DIAM.MAX, this.COLOR.GRAY.LIGHTER, this.COLOR.GRAY.DARKER));
      this.bg.circle(this.POS.X, this.POS.Y, i);
    }
  }
defineConstants() {
    this.COLOR = {BLACK: color(0),
                  GRAY: {LIGHTER: 20, DARKER: 0}};
    this.DIAM = {MIN: 1.5*height, MAX: 2*width, DELTA:5};
    this.POS = {X:0, Y: -height/3};
  }
}

class Candle {
  constructor(x, y) {
    this.flame = new Flame(x, y);
    this.wick = new Wick(x, y);
    this.wax = new Wax(x, y);
  }

  update() {
    this.flame.update();
  }

  display() {
    this.flame.display();
    this.wick.display();
    this.wax.display();
  }
}

class Wax {
  constructor(x, y) {
    this.pg = createGraphics(width, height);
    this.pg.translate(x, y);
    this.defineConstants();
    this.construct();
  }

  display() {
    image(this.pg, 0, 0);
  }

  construct() {
    this.pg.noStroke();
    for (let i = 0; i < this.N; ++ i) {
      this.pg.fill(this.COLOR.RED,
                   this.COLOR.GREEN + this.COLOR.D_GREEN*i,
                   this.COLOR.BLUE,
                   this.COLOR.ALPHA + this.COLOR.D_ALPHA*i);
      this.pg.rect(this.POS.X, this.POS.Y, this.DIM.W, this.DIM.H + this.DIM.D_H*i,
                   this.RADIUS, this.RADIUS, 0, 0);
    }
  }
 defineConstants() {
    this.POS = {X: -30*heightRatio, Y: 65*heightRatio};
    this.DIM = {W: 60*heightRatio, H: 60*heightRatio, D_H: -5*heightRatio};
    this.N = 10;
    this.RADIUS = 5*heightRatio;
    this.COLOR = {
      RED: 255,
      GREEN: 80, D_GREEN: 10,
      BLUE: 0,
      ALPHA: 0, D_ALPHA: 5};
  }
}

class Wick {
  constructor(x, y) {
    this.pg = createGraphics(width, height);
    this.pg.translate(x, y);
    this.defineConstants();
    this.construct();
  }

  display() {
    image(this.pg, 0, 0);
  }

  construct() {  
    this.pg.noStroke();
    this.pg.fill(this.COLOR.BLACK);
    for (let i = 0; i < this.N; ++i) {
      let dNoise = this.NOISE.SPEED*i;
      this.pg.circle(customNoise(this.NOISE, dNoise), this.Y + i, this.WIDTH);
    }
  }

  defineConstants() {
    this.Y = 35*heightRatio;
    this.WIDTH = 4*heightRatio;
    this.NOISE = {AMPLITUDE: 20*heightRatio, DISLOCATION: random(100), SPEED: 0.05};
    this.N = floor(30*heightRatio);
    this.COLOR = {BLACK: color(0)};
  }
}

class Flame {
  constructor(x, y) {
    this.defineConstants();

    this.layer = [];
    for (let i = 0; i < this.N_LAYERS; ++i) {
      this.layer[i] = createGraphics(width, height);
      this.layer[i].translate(x, y);
    }
  }
update() {
    this.updateData();

    this.backLight();
    this.blueTip();
    this.nonLuminousZone();
    this.luminousZone();
  }

  display() {
    for (let i = 0; i < this.N_LAYERS; ++i) {
      image(this.layer[i], 0, 0);
    }
  }

  defineConstants() {
    this.N_LAYERS = 4;

    this.DIMENSIONS = {
      Y: {DEFAULT: 50*heightRatio, VARIATION: 10*heightRatio},
      X: {
        BOTTOM: {
          SIDES: {DEFAULT: 30*heightRatio, VARIATION: 20*heightRatio},
          CENTER: {DEFAULT: 0, VARIATION: 0}
        },
        TOP: {
          SIDES: {DEFAULT: 10*heightRatio, VARIATION: 10*heightRatio},
          CENTER: {DEFAULT: 0, VARIATION: 30*heightRatio}
        }
      }
    }

    this.FLAME_OUTLINE_COORDINATES = {
      BOTTOM: {
        Y: {
          DEFAULT: this.DIMENSIONS.Y.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.Y.VARIATION, DISLOCATION: random(100)}
        },
        LEFT: {
          DEFAULT: -this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.X.BOTTOM.SIDES.VARIATION, DISLOCATION: random(100)
          }
        },
        CENTER: {
          DEFAULT: this.DIMENSIONS.X.BOTTOM.CENTER.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.X.BOTTOM.CENTER.VARIATION, DISLOCATION: random(100)}
        },
        RIGHT: {
          DEFAULT: this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.X.BOTTOM.SIDES.VARIATION, DISLOCATION: random(100)}
        }
      },
TOP: {
        Y: {
          DEFAULT: -this.DIMENSIONS.Y.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.Y.VARIATION, DISLOCATION: random(100)}
        },
        LEFT: {
          DEFAULT: -this.DIMENSIONS.X.TOP.SIDES.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.X.TOP.SIDES.VARIATION, DISLOCATION: random(100)}
        },
        CENTER: {
          DEFAULT: this.DIMENSIONS.X.TOP.CENTER.DEFAULT,
          NOISE: { AMPLITUDE: this.DIMENSIONS.X.TOP.CENTER.VARIATION, DISLOCATION: random(100)}
        },
        RIGHT:  {
          DEFAULT: this.DIMENSIONS.X.TOP.SIDES.DEFAULT,
          NOISE: {AMPLITUDE: this.DIMENSIONS.X.TOP.SIDES.VARIATION, DISLOCATION: random(100)}
        }
      },
    };

    this.OUTER_ZONE = {
      NOISE: {AMPLITUDE: 10, DISLOCATION: random(100)}
    };

    this.DARK_ZONE_COORDINATES = {
      LUMINOUS:{
        X: 0, Y: 45*heightRatio,
        DIAM_X: 50*heightRatio, DIAM_Y: 65*heightRatio,
        D_DIAM_X: 5*heightRatio, D_DIAM_Y: 10*heightRatio,
        ALPHA: 190, N: 2
      },
      NON_LUMINOUS: {
        X: 0, Y: 45*heightRatio,
        DIAM_X: 40*heightRatio, DIAM_Y: 50*heightRatio,
        D_DIAM_X: 5*heightRatio, D_DIAM_Y: 5*heightRatio,
        ALPHA: 80, N: 7
      },
      BACK_LIGHT: {
        X: 0, Y: 40*heightRatio,
        DIAM_X: 30*heightRatio, DIAM_Y: 45*heightRatio,
        D_DIAM_Y: 0, D_DIAM_X: 0,
        ALPHA: 255, N: 1
      },
      BLUE_TIP: {
        X: 0, Y: 40*heightRatio,
        DIAM_X: 27*heightRatio, DIAM_Y: 45*heightRatio,
        D_DIAM_Y: 5*heightRatio, D_DIAM_X: 5*heightRatio,
        ALPHA: 80, N: 7
      }
    };
let BACK_LIGHT_DIAM = {
      DEFAULT: 8*heightRatio,
      VARIATION: 8*heightRatio
    };

    this.BACK_LIGHT_COORDINATES = {
      Y: -10*heightRatio,
      DIAM_X: 5, DIAM_Y: 15*heightRatio,
      D_DIAM_Y: {
        DEFAULT: BACK_LIGHT_DIAM.DEFAULT,
        NOISE: {AMPLITUDE: BACK_LIGHT_DIAM.VARIATION, DISLOCATION: random(100)}
      },
      D_DIAM_X: {
        DEFAULT: BACK_LIGHT_DIAM.DEFAULT,
        NOISE: {AMPLITUDE: BACK_LIGHT_DIAM.VARIATION, DISLOCATION: random(100)}
      },
      N: 10
    };

    this.BLUE_TIP_COORDINATES = {
      X: - (this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT + this.DIMENSIONS.X.BOTTOM.SIDES.VARIATION),
      Y: -(this.DIMENSIONS.Y.DEFAULT + this.DIMENSIONS.Y.VARIATION),
      W: 2*(this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT + this.DIMENSIONS.X.BOTTOM.SIDES.VARIATION),
      H: 70*heightRatio,
      D_H: 4*heightRatio,
      ALPHA: 50,
      N: 10,
    };

    this.COLOR = {
      WHITE: color(255),
      YELLOW: color(255, 255, 200),
      ORANGE:color(255, 100, 0),
      RED: color(255, 0, 0, 10),
      BLUE: color(100, 175, 255)
    }
  }

  updateData() {
    let dNoise = 0.02*frameCount;

    this.updateFlameOutlineCoordinates(dNoise);
    this.updateDarkZoneCoordinates();  
    this.updateBackLightCoordinates(dNoise);
  }

  updateFlameOutlineCoordinates(dNoise) {
    let C = this.FLAME_OUTLINE_COORDINATES;
    let dCenter = {
      bottom: vary(C.BOTTOM.CENTER, dNoise),
      top: vary(C.TOP.CENTER, dNoise)
    };
this.flameOutlineCoordinates = {
      bottom: {
        y: vary(C.BOTTOM.Y, dNoise),
        center: dCenter.bottom,
        left: dCenter.bottom + vary(C.BOTTOM.LEFT, dNoise),
        right: dCenter.bottom + vary(C.BOTTOM.RIGHT, dNoise),
      },
      top: {
        y: vary(C.TOP.Y, dNoise),
        center: dCenter.top,
        left: dCenter.top + vary(C.TOP.LEFT, dNoise),
        right: dCenter.top + vary(C.TOP.RIGHT, dNoise)
      }
    };

    this.outerZone = customNoise(this.OUTER_ZONE.NOISE, dNoise);
  }

  updateDarkZoneCoordinates() { 
    let C = this.DARK_ZONE_COORDINATES;

    this.darkZoneCoordinates = {
      luminous: this.setDarkZoneCoordinates(C.LUMINOUS),
      nonLuminous: this.setDarkZoneCoordinates(C.NON_LUMINOUS),
      backLight: this.setDarkZoneCoordinates(C.BACK_LIGHT),
      blueTip: this.setDarkZoneCoordinates(C.BLUE_TIP)
    };
  }

  updateBackLightCoordinates(dNoise) {
    let C = this.BACK_LIGHT_COORDINATES;
    let foc = this.flameOutlineCoordinates;

    this.backLightCoordinates = {
      x: 0.5*(foc.bottom.center + foc.top.center),    
      y: this.calcY(C.Y),
      diamX: C.DIAM_X,
      diamY: C.DIAM_Y,
      dDiamX: vary(C.D_DIAM_X, dNoise),
      dDiamY: vary(C.D_DIAM_Y, dNoise),
      n: C.N
    };
  }

  calcY(defaultValue) {
    return map(defaultValue,
               -this.DIMENSIONS.Y.DEFAULT, this.DIMENSIONS.Y.DEFAULT,
               this.flameOutlineCoordinates.top.y, this.flameOutlineCoordinates.bottom.y);
  }
  
  calcX(defaultValue, h) {
    return map(defaultValue,
               -this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT, this.DIMENSIONS.X.BOTTOM.SIDES.DEFAULT,
               this.flameOutlineCoordinates.bottom.left, this.flameOutlineCoordinates.bottom.right);
  }

  setDarkZoneCoordinates(ZONE) {
    return {
      x: this.calcX(ZONE.X),
      y: this.calcY(ZONE.Y),
      diamX: this.calcX(ZONE.DIAM_X),
      diamY: this.calcY(ZONE.DIAM_Y),
      dDiamX: ZONE.D_DIAM_X,
      dDiamY: ZONE.D_DIAM_Y,
      alpha: ZONE.ALPHA,
      n: ZONE.N
    }
  }

  backLight() {
    let pg = this.layer[0];
    pg.clear();
  
    pg.noStroke();
    pg.fill(this.COLOR.RED);
    light(pg, this.backLightCoordinates);

    darkZone(pg, this.darkZoneCoordinates.backLight);
  }

  nonLuminousZone() {
    let pg = this.layer[1];
    pg.clear();
  
    pg.stroke(this.COLOR.ORANGE);
    pg.strokeWeight(5*heightRatio);
    pg.fill(this.COLOR.ORANGE);
    flameOutline(pg, this.flameOutlineCoordinates);

    darkZone(pg, this.darkZoneCoordinates.nonLuminous);
  }

  luminousZone() {
    let pg = this.layer[2];   
    pg.clear();
  
    pg.stroke(this.COLOR.YELLOW);
    pg.strokeWeight(5*heightRatio);
    pg.fill(this.COLOR.WHITE); 
    flameOutline(pg, this.flameOutlineCoordinates, this.outerZone);
